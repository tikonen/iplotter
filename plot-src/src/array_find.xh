/*
 * Plot - plot time-based data on screen and to file with interactive controls
 * Copyright (C) 2006  Jonas Berlin <xkr47@outerspace.dyndns.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ****
 * array_find - interpolating array binary search
 */

#include <stdio.h>

typedef enum {
   // all examples below assume the array contains the values 1, 2, 6, 9.

   AFB_LEFT_OR_MATCH,
   // if looking for 0 it will return the index of 1 (= 0)
   // if looking for 2 it will return the index of 2 (= 1)
   // if looking for 4 it will return the index of 2 (= 1)
   // if looking for 10 it will return the index of 9 (= 3)

   AFB_RIGHT_OR_MATCH,
   // if looking for 0 it will return the index of 1 (= 0)
   // if looking for 2 it will return the index of 2 (= 1)
   // if looking for 4 it will return the index of 6 (= 2)
   // if looking for 10 it will return the index of 9 (= 3)

   AFB_RIGHT_OR_MATCH_OVER,
   // if looking for 0 it will return the index of 1 (= 0)
   // if looking for 2 it will return the index of 2 (= 1)
   // if looking for 4 it will return the index of 6 (= 2)
   // if looking for 10 it will return the index of 9 + 1 (= 4)

} array_find_behaviour_t;

#deftemplate array_find(DATATYPE, FUNCPREFIX)

#if 0
#define assert_x(must_be_true) do { if(unlikely(!(must_be_true))) { fprintf(stderr, "Assertion '%s' failed on %s:%d\n", #must_be_true, __FILE__, __LINE__); exit(1); }} while(0)
#else
#define assert_x(x)
#endif

#if 0
#define pprintf printf
#else
#define pprintf(...)
#endif

// search whole array for key.. if no match within array either 0 or
// arr_count-1 is returned (except for AFB_RIGHT_OR_MATCH_OVER, which
// might give arr_count)
#define FUNCPREFIX_find(VAR_SUFFIX, key, behaviour) FUNCPREFIX_find_int(VAR_SUFFIX, key, behaviour, 0, VAR_SUFFIX ## _count - 1)

// search within range.. if it goes outside either start or end is
// returned (except for AFB_RIGHT_OR_MATCH_OVER, which might give
// end+1) - the caller is responsible for making sure start, end are
// sane values
#define FUNCPREFIX_find_within(VAR_SUFFIX, key, behaviour, start, end) FUNCPREFIX_find_int(VAR_SUFFIX, key, behaviour, start, end)

//static int FUNCPREFIX_iter; // for profiling
//static int FUNCPREFIX_max;
//static int FUNCPREFIX_min;

WARN_UNUSED_RESULT NONNULL static int FUNCPREFIX_find_int(DATATYPE *arr, DATATYPE key, array_find_behaviour_t behaviour, int p_min, int p_max) {
   pprintf("ffind %ld from %ld - %ld (%d - %d) behaviour %d\n", key, arr[p_min], arr[p_max], p_min, p_max, behaviour);

   DATATYPE d_min = arr[p_min];
   if(key <= d_min) {
      pprintf("  Key %ld <= %ld\n", key, d_min);
      return p_min;
   }

   DATATYPE d_max = arr[p_max];
   if(key >= d_max) {
      pprintf("  Key %ld >= %ld\n", key, d_max);
      if(behaviour == AFB_RIGHT_OR_MATCH_OVER && key > d_max) {
	 return p_max + 1;
      }
      return p_max;
   }

   //FUNCPREFIX_iter = 0;
   //FUNCPREFIX_min = 0;
   //FUNCPREFIX_max = 0;

   int iter = 0;

   // loop as long as there is at least one point between p_min and p_max
   while(p_min + 1 < p_max) {
      int p_est;
      if(++iter < 20) {
	 // estimate most probable point where our value should be. I
	 // subtract 2 from p_max - p_min (and add 1 later on) to
	 // avoid getting p_mid == p_min or p_mid == p_max which would
	 // give an endless loop. It also seems to decrease the number
	 // of iterations done than if done correctly :O
	 p_est = (int)((p_max - p_min - 2) * ((double)(key - d_min)) / (d_max - d_min) + p_min + 1);
      } else {
	 // algorithm potentially bad, switch to O(log N) algorithm
	 p_est = (p_max + p_min) / 2;
      }
      DATATYPE d_est = arr[p_est];

      //FUNCPREFIX_iter++;

      // if we hit the jackpot => finish, otherwise use our estimate as new min or max
      if(key == d_est) {
	 pprintf("  key %ld found at %d\n", key, p_est);
	 return p_est;
      } else if(key < d_est) {
	 //FUNCPREFIX_min++;
	 p_max = p_est;
	 d_max = d_est;
      } else {
	 //FUNCPREFIX_max++;
	 p_min = p_est;
	 d_min = d_est;
      }
   }

   // if we get here, d_min < key < d_max and p_min + 1 == p_max.. if not, we have a bug above

   assert_x(d_min < key);
   assert_x(key < d_max);
   assert_x(p_min + 1 == p_max);

   pprintf("  key %ld found between %ld - %ld (%d - %d)\n", key, d_min, d_max, p_min, p_max);

   return p_min + (behaviour == AFB_LEFT_OR_MATCH ? 0 : 1);
}

#undef pprintf
#undef assert_x

#endtemplate

/*
 * Local variables:
 * c-file-style: "ellemtel"
 * c-file-offsets: ((c . c-lineup-dont-change) (statement-cont . (lambda (le) (if (save-excursion (goto-char (cdr le)) (looking-at "return")) (c-lineup-java-inher le) (c-lineup-math le)))))
 * End:
 */
